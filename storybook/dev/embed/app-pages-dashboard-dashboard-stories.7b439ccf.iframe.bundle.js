/*! For license information please see app-pages-dashboard-dashboard-stories.7b439ccf.iframe.bundle.js.LICENSE.txt */
"use strict";(self.webpackChunkfasten_connect_frontend_ngx=self.webpackChunkfasten_connect_frontend_ngx||[]).push([[479],{"./node_modules/@angular/common/fesm2022/http/testing.mjs":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{Sj:()=>HttpClientTestingModule});var _angular_common_http__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/@angular/common/fesm2022/http.mjs"),_angular_core__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./node_modules/@angular/core/fesm2022/core.mjs"),rxjs__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./node_modules/rxjs/dist/esm5/internal/Observable.js");class HttpTestingController{}class TestRequest{request;observer;get cancelled(){return this._cancelled}_cancelled=!1;constructor(request,observer){this.request=request,this.observer=observer}flush(body,opts={}){if(this.cancelled)throw new Error("Cannot flush a cancelled request.");const url=this.request.urlWithParams,headers=opts.headers instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_0__.Lr?opts.headers:new _angular_common_http__WEBPACK_IMPORTED_MODULE_0__.Lr(opts.headers);body=function _maybeConvertBody(responseType,body){if(null===body)return null;switch(responseType){case"arraybuffer":return function _toArrayBufferBody(body){if("undefined"==typeof ArrayBuffer)throw new Error("ArrayBuffer responses are not supported on this platform.");if(body instanceof ArrayBuffer)return body;throw new Error("Automatic conversion to ArrayBuffer is not supported for response type.")}(body);case"blob":return function _toBlob(body){if("undefined"==typeof Blob)throw new Error("Blob responses are not supported on this platform.");if(body instanceof Blob)return body;if(ArrayBuffer&&body instanceof ArrayBuffer)return new Blob([body]);throw new Error("Automatic conversion to Blob is not supported for response type.")}(body);case"json":return _toJsonBody(body);case"text":return function _toTextBody(body){if("string"==typeof body)return body;if("undefined"!=typeof ArrayBuffer&&body instanceof ArrayBuffer)throw new Error("Automatic conversion to text is not supported for ArrayBuffers.");if("undefined"!=typeof Blob&&body instanceof Blob)throw new Error("Automatic conversion to text is not supported for Blobs.");return JSON.stringify(_toJsonBody(body,"text"))}(body);default:throw new Error(`Unsupported responseType: ${responseType}`)}}(this.request.responseType,body);let statusText=opts.statusText,status=void 0!==opts.status?opts.status:_angular_common_http__WEBPACK_IMPORTED_MODULE_0__.kG.Ok;if(void 0===opts.status&&(null===body?(status=_angular_common_http__WEBPACK_IMPORTED_MODULE_0__.kG.NoContent,statusText||="No Content"):statusText||="OK"),void 0===statusText)throw new Error("statusText is required when setting a custom status.");status>=200&&status<300?(this.observer.next(new _angular_common_http__WEBPACK_IMPORTED_MODULE_0__.cS({body,headers,status,statusText,url})),this.observer.complete()):this.observer.error(new _angular_common_http__WEBPACK_IMPORTED_MODULE_0__.yz({error:body,headers,status,statusText,url}))}error(error,opts={}){if(this.cancelled)throw new Error("Cannot return an error for a cancelled request.");if(opts.status&&opts.status>=200&&opts.status<300)throw new Error("error() called with a successful status.");const headers=opts.headers instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_0__.Lr?opts.headers:new _angular_common_http__WEBPACK_IMPORTED_MODULE_0__.Lr(opts.headers);this.observer.error(new _angular_common_http__WEBPACK_IMPORTED_MODULE_0__.yz({error,headers,status:opts.status||0,statusText:opts.statusText||"",url:this.request.urlWithParams}))}event(event){if(this.cancelled)throw new Error("Cannot send events to a cancelled request.");this.observer.next(event)}}function _toJsonBody(body,format="JSON"){if("undefined"!=typeof ArrayBuffer&&body instanceof ArrayBuffer)throw new Error(`Automatic conversion to ${format} is not supported for ArrayBuffers.`);if("undefined"!=typeof Blob&&body instanceof Blob)throw new Error(`Automatic conversion to ${format} is not supported for Blobs.`);if("string"==typeof body||"number"==typeof body||"object"==typeof body||"boolean"==typeof body||Array.isArray(body))return body;throw new Error(`Automatic conversion to ${format} is not supported for response type.`)}class HttpClientTestingBackend{open=[];isTestingBackend=!0;handle(req){return new rxjs__WEBPACK_IMPORTED_MODULE_2__.c((observer=>{const testReq=new TestRequest(req,observer);return this.open.push(testReq),observer.next({type:_angular_common_http__WEBPACK_IMPORTED_MODULE_0__.hv.Sent}),()=>{testReq._cancelled=!0}}))}_match(match){return"string"==typeof match?this.open.filter((testReq=>testReq.request.urlWithParams===match)):"function"==typeof match?this.open.filter((testReq=>match(testReq.request))):this.open.filter((testReq=>!(match.method&&testReq.request.method!==match.method.toUpperCase()||match.url&&testReq.request.urlWithParams!==match.url)))}match(match){const results=this._match(match);return results.forEach((result=>{const index=this.open.indexOf(result);-1!==index&&this.open.splice(index,1)})),results}expectOne(match,description){description||=this.descriptionFromMatcher(match);const matches=this.match(match);if(matches.length>1)throw new Error(`Expected one matching request for criteria "${description}", found ${matches.length} requests.`);if(0===matches.length){let message=`Expected one matching request for criteria "${description}", found none.`;if(this.open.length>0){message+=` Requests received are: ${this.open.map(describeRequest).join(", ")}.`}throw new Error(message)}return matches[0]}expectNone(match,description){description||=this.descriptionFromMatcher(match);const matches=this.match(match);if(matches.length>0)throw new Error(`Expected zero matching requests for criteria "${description}", found ${matches.length}.`)}verify(opts={}){let open=this.open;if(opts.ignoreCancelled&&(open=open.filter((testReq=>!testReq.cancelled))),open.length>0){const requests=open.map(describeRequest).join(", ");throw new Error(`Expected no open requests, found ${open.length}: ${requests}`)}}descriptionFromMatcher(matcher){if("string"==typeof matcher)return`Match URL: ${matcher}`;if("object"==typeof matcher){return`Match method: ${matcher.method||"(any)"}, URL: ${matcher.url||"(any)"}`}return`Match by function: ${matcher.name}`}static ɵfac=function HttpClientTestingBackend_Factory(__ngFactoryType__){return new(__ngFactoryType__||HttpClientTestingBackend)};static ɵprov=_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineInjectable"]({token:HttpClientTestingBackend,factory:HttpClientTestingBackend.ɵfac})}function describeRequest(testRequest){const url=testRequest.request.urlWithParams;return`${testRequest.request.method} ${url}`}function provideHttpClientTesting(){return[HttpClientTestingBackend,{provide:_angular_common_http__WEBPACK_IMPORTED_MODULE_0__.JV,useExisting:HttpClientTestingBackend},{provide:HttpTestingController,useExisting:HttpClientTestingBackend},{provide:_angular_common_http__WEBPACK_IMPORTED_MODULE_0__.iS,useValue:!1}]}("undefined"==typeof ngDevMode||ngDevMode)&&_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵsetClassMetadata"](HttpClientTestingBackend,[{type:_angular_core__WEBPACK_IMPORTED_MODULE_1__.Injectable}],null,null);class HttpClientTestingModule{static ɵfac=function HttpClientTestingModule_Factory(__ngFactoryType__){return new(__ngFactoryType__||HttpClientTestingModule)};static ɵmod=_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineNgModule"]({type:HttpClientTestingModule,imports:[_angular_common_http__WEBPACK_IMPORTED_MODULE_0__.q1]});static ɵinj=_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineInjector"]({providers:[provideHttpClientTesting()],imports:[_angular_common_http__WEBPACK_IMPORTED_MODULE_0__.q1]})}("undefined"==typeof ngDevMode||ngDevMode)&&_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵsetClassMetadata"](HttpClientTestingModule,[{type:_angular_core__WEBPACK_IMPORTED_MODULE_1__.NgModule,args:[{imports:[_angular_common_http__WEBPACK_IMPORTED_MODULE_0__.q1],providers:[provideHttpClientTesting()]}]}],null,null)},"./projects/fasten-connect-stitch-embed/src/app/pages/dashboard/dashboard.stories.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{ConnectedBrands:()=>ConnectedBrands,PendingBrands:()=>PendingBrands,Primary:()=>Primary,TefcaModeDiscoveredBrands:()=>TefcaModeDiscoveredBrands,TefcaModeLoading:()=>TefcaModeLoading,TefcaModeNoResults:()=>TefcaModeNoResults,__namedExportsOrder:()=>__namedExportsOrder,default:()=>__WEBPACK_DEFAULT_EXPORT__});var _storybook_angular__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/@storybook/angular/dist/index.mjs"),_angular_core__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./node_modules/@angular/core/fesm2022/core.mjs"),_dashboard_component__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./projects/fasten-connect-stitch-embed/src/app/pages/dashboard/dashboard.component.ts"),ngx_logger_testing__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__("./node_modules/ngx-logger/fesm2020/ngx-logger-testing.mjs"),_angular_common_http_testing__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__("./node_modules/@angular/common/fesm2022/http/testing.mjs"),_angular_router__WEBPACK_IMPORTED_MODULE_5__=__webpack_require__("./node_modules/@angular/router/fesm2022/router.mjs"),_app_routes__WEBPACK_IMPORTED_MODULE_6__=__webpack_require__("./projects/fasten-connect-stitch-embed/src/app/app.routes.ts"),rxjs__WEBPACK_IMPORTED_MODULE_7__=__webpack_require__("./node_modules/rxjs/dist/esm5/internal/BehaviorSubject.js");const __WEBPACK_DEFAULT_EXPORT__={title:"Pages/Dashboard",component:_dashboard_component__WEBPACK_IMPORTED_MODULE_2__.S,decorators:[(0,_storybook_angular__WEBPACK_IMPORTED_MODULE_0__.L4)({providers:[(0,_angular_core__WEBPACK_IMPORTED_MODULE_1__.importProvidersFrom)(_angular_common_http_testing__WEBPACK_IMPORTED_MODULE_4__.Sj,ngx_logger_testing__WEBPACK_IMPORTED_MODULE_3__.D0),(0,_angular_router__WEBPACK_IMPORTED_MODULE_5__.lh)(_app_routes__WEBPACK_IMPORTED_MODULE_6__.J)]})],tags:["autodocs"]},Primary={},PendingBrands={},ConnectedBrands={},TefcaModeLoading={args:{loadingTefcaRLS:!0,configService:{systemConfigSubject:new rxjs__WEBPACK_IMPORTED_MODULE_7__.t({org:{name:"Acme Inc"},tefcaMode:!0})}}},TefcaModeDiscoveredBrands={args:{loadingTefcaRLS:!1,emptyTefcaRLSResult:!1,configService:{systemConfigSubject:new rxjs__WEBPACK_IMPORTED_MODULE_7__.t({org:{name:"Acme Inc"},tefcaMode:!0}),vaultProfileConfigSubject:new rxjs__WEBPACK_IMPORTED_MODULE_7__.t({addConnectedAccount(external_state,org_connection_id,connection_status,platform_type,brand_id,portal_id,endpoint_id,vault_profile_connection_id,patient_auth_type){},addDiscoveredAccount(brand,portal,endpoint,vaultProfileConnectionId){},addPendingAccount(externalState,brand,portal,endpoint,vaultProfileConnectionId){},authorizeTefcaDirectConnectedAccount:(vaultProfileConnectionId,orgConnectionId,connectionStatus)=>!1,revokeTefcaDirectConnectedAccount:vaultProfileConnectionId=>!1,discoveredPatientAccounts:{"1234-12345":{vault_profile_connection_id:"1234-12345",portal:{id:"123",name:"Example Hospital"},brand:{id:"brand-1",name:"HealthApp A"},endpoint:{id:"endpoint-1",platform_type:"epic"}}}})}}},TefcaModeNoResults={args:{loadingTefcaRLS:!1,emptyTefcaRLSResult:!0,configService:{systemConfigSubject:new rxjs__WEBPACK_IMPORTED_MODULE_7__.t({org:{name:"Acme Inc"},tefcaMode:!0})}}},__namedExportsOrder=["Primary","PendingBrands","ConnectedBrands","TefcaModeLoading","TefcaModeDiscoveredBrands","TefcaModeNoResults"];Primary.parameters={...Primary.parameters,docs:{...Primary.parameters?.docs,source:{originalSource:"{\n  // args: {\n  //   primary: true,\n  //   label: 'Button',\n  // },\n}",...Primary.parameters?.docs?.source}}},PendingBrands.parameters={...PendingBrands.parameters,docs:{...PendingBrands.parameters?.docs,source:{originalSource:"{\n  // args: {\n  //   primary: true,\n  //   label: 'Button',\n  // },\n}",...PendingBrands.parameters?.docs?.source}}},ConnectedBrands.parameters={...ConnectedBrands.parameters,docs:{...ConnectedBrands.parameters?.docs,source:{originalSource:"{\n  // args: {\n  //   primary: true,\n  //   label: 'Button',\n  // },\n}",...ConnectedBrands.parameters?.docs?.source}}},TefcaModeLoading.parameters={...TefcaModeLoading.parameters,docs:{...TefcaModeLoading.parameters?.docs,source:{originalSource:"{\n  args: {\n    loadingTefcaRLS: true,\n    configService: {\n      systemConfigSubject: new BehaviorSubject<SystemConfig>({\n        org: {\n          name: 'Acme Inc'\n        },\n        tefcaMode: true\n      } as SystemConfig)\n    } as ConfigService\n  }\n}",...TefcaModeLoading.parameters?.docs?.source}}},TefcaModeDiscoveredBrands.parameters={...TefcaModeDiscoveredBrands.parameters,docs:{...TefcaModeDiscoveredBrands.parameters?.docs,source:{originalSource:'{\n  args: {\n    loadingTefcaRLS: false,\n    emptyTefcaRLSResult: false,\n    configService: {\n      systemConfigSubject: new BehaviorSubject<SystemConfig>({\n        org: {\n          name: \'Acme Inc\'\n        },\n        tefcaMode: true\n      } as SystemConfig),\n      vaultProfileConfigSubject: new BehaviorSubject<VaultProfileConfig>({\n        addConnectedAccount(external_state: string, org_connection_id: string, connection_status: string, platform_type: string, brand_id?: string, portal_id?: string, endpoint_id?: string, vault_profile_connection_id?: string, patient_auth_type?: string): void {},\n        addDiscoveredAccount(brand: LighthouseBrandListDisplayItem, portal: LighthousePortalListDisplayItem, endpoint: LighthouseEndpointListDisplayItem, vaultProfileConnectionId: string): void {},\n        addPendingAccount(externalState: string, brand: LighthouseBrandListDisplayItem, portal: LighthousePortalListDisplayItem, endpoint: LighthouseEndpointListDisplayItem, vaultProfileConnectionId?: string): void {},\n        authorizeTefcaDirectConnectedAccount(vaultProfileConnectionId: string, orgConnectionId: string, connectionStatus: string): boolean {\n          return false;\n        },\n        revokeTefcaDirectConnectedAccount(vaultProfileConnectionId: string): boolean {\n          return false;\n        },\n        discoveredPatientAccounts: {\n          "1234-12345": {\n            vault_profile_connection_id: "1234-12345",\n            portal: {\n              id: "123",\n              name: "Example Hospital"\n            } as LighthousePortalListDisplayItem,\n            brand: {\n              id: "brand-1",\n              name: "HealthApp A"\n            } as LighthouseBrandListDisplayItem,\n            endpoint: {\n              id: "endpoint-1",\n              platform_type: \'epic\'\n            } as LighthouseEndpointListDisplayItem\n          }\n        }\n      })\n    } as ConfigService\n  }\n}',...TefcaModeDiscoveredBrands.parameters?.docs?.source}}},TefcaModeNoResults.parameters={...TefcaModeNoResults.parameters,docs:{...TefcaModeNoResults.parameters?.docs,source:{originalSource:"{\n  args: {\n    loadingTefcaRLS: false,\n    emptyTefcaRLSResult: true,\n    configService: {\n      systemConfigSubject: new BehaviorSubject<SystemConfig>({\n        org: {\n          name: 'Acme Inc'\n        },\n        tefcaMode: true\n      } as SystemConfig)\n    } as ConfigService\n  }\n}",...TefcaModeNoResults.parameters?.docs?.source}}}}}]);